// mix.cpp  -  generated by Sonic/C++ translator v 1.000.
// Translator written by Don Cross <cosinekitty@gmail.com>
// For more info about Sonic, see the Github repo at:
// https://github.com/cosinekitty/sonic

// This file created: Sun Jul 23 20:29:44 2017

// Standard includes...
#include <stdio.h>
#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <math.h>

// Sonic-specific includes...
#include "sonic.h"


const long    SamplingRate     =  44100;
const double  SampleTime       =  1.0 / double(SamplingRate);
const int     NumChannels      =  2;
const int     InterpolateFlag  =  1;

const double pi = 4.0 * atan(1.0);
const double e  = exp(1.0);

void f_mix (
    SonicWave &v_inWave1,
    SonicWave &v_inWave2,
    SonicWave &v_outWave );


int main ( int argc, char *argv[] )
{
    if ( argc != 4 )
    {
        cerr << "Use:  mix inWave1 inWave2 outWave" << endl << endl;
        return 1;
    }

    SonicWave v_inWave1 ( argv[1], "inWave1", SamplingRate, NumChannels );
    SonicWave v_inWave2 ( argv[2], "inWave2", SamplingRate, NumChannels );
    SonicWave v_outWave ( argv[3], "outWave", SamplingRate, NumChannels );

    f_mix ( v_inWave1, v_inWave2, v_outWave );

    v_inWave1.convertToWav ( argv[1] );
    v_inWave2.convertToWav ( argv[2] );
    v_outWave.convertToWav ( argv[3] );
    SonicWave::EraseAllTempFiles();
    return 0;
}


void f_mix (
    SonicWave &v_inWave1,
    SonicWave &v_inWave2,
    SonicWave &v_outWave )
{
    {
        //  outWave[c,i] = inWave1[c,i] + inWave2[c,i];

        v_outWave.openForWrite();
        v_inWave1.openForRead();
        v_inWave2.openForRead();
        double sample [NumChannels];
        double t = double(0);
        for ( long i=0; ; ++i, t += SampleTime )
        {
            int countdown = NumChannels * 2;
            sample[0] = v_inWave1.fetch(0, i, countdown) + v_inWave2.fetch(0, i, countdown);
            sample[1] = v_inWave1.fetch(1, i, countdown) + v_inWave2.fetch(1, i, countdown);
            if ( countdown <= 0 ) break;
            v_outWave.write ( sample );
        }
        v_outWave.close();
        v_inWave1.close();
        v_inWave2.close();
    }
}



/*---  end of file mix.cpp  ---*/
