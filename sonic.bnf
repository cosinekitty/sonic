program ::=  {global} program_body {global}
global ::= function_body | parm_override | import_decl | var_decl
import_decl ::=  "import" import_name { "," import_name } "from" string_constant ";"
import_name ::= name

parm_override ::=  parm_name "=" integer_const ";" |
                   "interpolate" "=" boolean_const ";"

parm_name ::=  "r" | "m"

program_body ::=  "program" name "(" func_args ")"
                  "{" {var_decl} {statement} "}"

statement ::=  [function_call] ";" | assignment ";" |
               if_body | while_body | repeat_body | for_body
               "return" [b0] ";" |
               "{" {statement} "}"

var_decl ::= "var" var_spec { "," var_spec } ":" type ";"
var_spec ::= name [ var_init ]

var_init ::= "=" b0 | "(" [ b0 { "," b0 } ] ")"

type ::= basic_type | "wave" | import_name | array_type
array_type ::= basic_type "[" integer_constant { "," integer_constant } "]"
basic_type ::=  "real" | "integer" | "boolean"

function_call ::=  name "(" [ expr { , expr } ] ")"

function_body ::=  "function" name "(" func_args ")" [ ":" type ]
                    "{" {var_decl} {statement} "}"

func_args ::=  [ arg { "," arg } ]
arg ::=  name ":" type ["&"]
assignment ::=  lvalue assign_op expr
lvalue ::=  name [ "[" "c" "," "i" [ ":" term ] "]" ] | name "[" term { "," term } "]"
assign_op ::=  "=" | "<<" | "+=" | "-=" | "*=" | "/=" | "%="
expr ::=  b0 | "{" b0 {"," b0} "}"
b0 ::=  b1 { "|" b1 }
b1 ::=  b2 { "&" b2 }
b2 ::=  term [ relop term ]
relop ::=  "==" | "<" | "<=" | ">" | ">=" | "!=" | "<>"
term ::=  t1 { op1 t1 }
op1 ::=  "+" | "-"
t1 ::=  t2 { op2 t2 }
op2 ::=  "*" | "/" | "%"
t2 ::=  t3 [ "^" t2 ]
t3 ::=  constant | var_term | function_call | "(" b0 ")" | "!" t3 | "-" t3 | "$"
var_term ::=  name [var_qualifier]
var_qualifier ::= "." wave_field | "[" term { "," term } "]"
wave_field ::= "n" | "r" | "m" | "max"
constant ::=  numeric_constant | string_constant | builtin
builtin ::= "pi" | "e" | "i" | "c" | "n" | "t" | parm_name | boolean_const
boolean_const ::= "true" | "false"
if_body ::=  "if" "(" b0 ")" statement [ "else" statement ]
while_body ::=  "while" "(" b0 ")" statement
for_body ::=  "for" "(" assignment ";" b0 ";" assignment ")"  statement
repeat_body ::= "repeat" "(" term ")" statement

numeric_constant ::= integer_constant | real_constant

integer_constant ::= a decimal integer number, e.g. 123

real_constant ::= a decimal real number expressed in standard (123.4)
                  or scientific (1.234e+2) notation

string_constant ::= zero or more ASCII characters inside double quotes
name ::= alpha{alnum}
alpha ::= any alphabetic character "a"-"z", "A"-"Z", or underscore "_"
alnum ::= alpha | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
